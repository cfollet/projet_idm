/* $Id:$ 
 * Creation : October 18, 2015
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 * Namming convention : 
 * 		attribute : lowercase and underscore separated
 *		method name : undersocre separated 
 *			guard  : {from}__{to}__Guard
 *			activity : {State_Name}__Activity
 */
@mainClass "Transformation::Transformation"


package Transformation;


require kermeta
require "platform:/resource/StateMachine/transfos/java/JavaClass.kmt"
require "platform:/resource/StateMachine/transfos/java/JavaAttribute.kmt"
require "platform:/resource/StateMachine/transfos/java/JavaOperation.kmt"
require "platform:/resource/StateMachine/transfos/utils/StringUtil.kmt"
require "platform:/resource/StateMachine/metaModels/StateMachine.ecore"

using kermeta::standard
using JavaClass
using SimplStateMachine
using StringUtil
using JavaAttribute
using JavaOperation

class Transformation
{
	attribute java_class : JavaClass
	attribute str_util : StringUtil
	
	operation initialize() : Transformation is do
		java_class := JavaClass.new.initialize("public","")
		str_util := StringUtil.new
		
		result := self
	end

	// ecore -> java pau ware
    operation transform(sm : StateMachine) is do
    	// Set class name
    	java_class.name := str_util.replaceSpaceWithUnderscore(sm.name)
    	
    	// Add all attributes
		sm.states.each { s | addAttribute(s) }
		var attr : JavaAttribute init JavaAttribute.new.initialize("private","AbstractStatechart_monitor",str_util.addUnderscore(sm.name))
		java_class.attributes.add(attr)
		
		// Add all methods
		createConstructor(sm)
		createStart(sm)
		createStop(sm)
		createEvents(sm)
    end
    
    // Get the name of the given state and prefix it by 
    // the name of his container if any
    operation getFullStateName(s : State) : String is do
    	var name : String init ""
    	if (StateMachine.isInstance(s)) then
    		result := ""
    	else
    		name := str_util.addUnderscore(str_util.replaceSpaceWithUnderscore(s.name))
    		if (s.container != void) then 
    			var compState : State
    			var compName : String
    			compState ?= s.container
    			compName := getFullStateName(compState)
    			if not(compName.equals("")) then name := compName + "_" + name end 
    		end
    		result := name
    	end
    end
    
    // add recursively a state and his child if any 
    // to the java class as an attribute
	operation addAttribute(state : State) is do
		var attr : JavaAttribute init JavaAttribute.new.initialize("private","AbstractStatechart",getFullStateName(state))
		java_class.attributes.add(attr)
		if (CompositeState.isInstance(state)) then
			var compState : CompositeState
			compState ?= state
			compState.states.each { s | addAttribute(s) }		
		end
	end
	
	// add the behavior of the current state (activity, inputState, ...)
	// the op parameter is for adding it inside a constructor for exemple
	operation addStateBehavior(state : State, op : JavaOperation) is do 
		if (not CompositeState.isInstance(state)) 
			then // Not a composite state, just print it
				op.body.add(getFullStateName(state) + " = new Statechart(\""+getFullStateName(state)+"\")")
				// Now, print his operation
				if(state.~operation != void)
					then op.body.add(getFullStateName(state)+".doActivity(this, \""+getFullStateName(state)+"__Activity\")")
				end
				op.body.add("") 
			else // A composite state, compute all child state recursively and add xor childs chain 
				var compState : CompositeState
				var line : String init ""
				compState ?= state
				
				// compute child recursively
				compState.states.each { s | addStateBehavior(s, op)}
				
				// add entry point of the composite state
				op.body.add(getFullStateName(compState.initialState.referencedState)+".inputState()")
				
				// add xor chain
				compState.states.each { s | line := line + "(" + getFullStateName(s) + ".xor" }
				line := line.substring(1,line.size-4)
				compState.states.each { s | line := line + ")"}
				line := line.substring(0,line.size-1)
				line := line + ".name(\""+getFullStateName(compState)+"\")"
				op.body.add(line)
		end
	end
	
	// create the java class constructor and initialize the behavior
	operation createConstructor (sm : StateMachine) is do
		var op : JavaOperation init JavaOperation.new.initialize("public","",str_util.replaceSpaceWithUnderscore(sm.name))
		var line : String init ""

		sm.states.each { s | addStateBehavior(s,op) }
		
		// add method exception
		op.exceptions.add("Statechart_exception")
				
		// Add StateMachine entry point
		op.body.add(getFullStateName(sm.initialState.referencedState)+".inputState()")
		
		// add the Monitor line with a chain of the child of StateMachine
		line := str_util.addUnderscore(sm.name)+" = new Statechart_monitor"
		sm.states.each { s | line := line + "(" + getFullStateName(s) + ".xor" }
		line := line.substring(0,line.size-4)
		sm.states.each { s | line := line + ")"}
		line := line.substring(0,line.size-1)
		line := line+ ","+ "\""+str_util.replaceSpaceWithUnderscore(sm.name)+"\",AbstractStatechart_monitor.Show_on_system_out, null)"
		op.body.add(line)
		
		java_class.operations.add(op)
	end

	// Create start method where we add the transitions [with event and guard]
	operation createStart(sm : StateMachine) is do
		var op : JavaOperation init JavaOperation.new.initialize("public","void","start")
		var line : String init ""
		
		// add method exception
		op.exceptions.add("Statechart_exception")
		
		sm.transitions.each{transition | 
			// adding the event name 
			line := str_util.addUnderscore(str_util.replaceSpaceWithUnderscore(sm.name))+".fires(\""+str_util.replaceSpaceWithUnderscore(transition.event.name)+"__Event\", "
			
			// adding the source and the target
			line := line + getFullStateName(transition.source) + ", "
			line := line + getFullStateName(transition.target) + ", "
			
			// adding the guard if any
			if(transition.guard != void)
				then line := line + "this, \"" + getFullStateName(transition.source)+"_"+ getFullStateName(transition.target)+ "__Guard" + "\""
				else line := line + "true" // Optionnal in fires() parameters?
			end
			line := line + ")"
			op.body.add(line)
		}
		
		// Start the statemachine
		op.body.add(str_util.addUnderscore(str_util.replaceSpaceWithUnderscore(sm.name))+".start()")
		
		java_class.operations.add(op)
	end	
	
	// Stop method to stop the statemachine ^^
	operation createStop(sm : StateMachine) is do
		var op : JavaOperation init JavaOperation.new.initialize("public","void","stop")
		op.body.add(str_util.addUnderscore(str_util.replaceSpaceWithUnderscore(sm.name))+".stop()")
		
		// add method exception
		op.exceptions.add("Statechart_exception")
		
		java_class.operations.add(op)
	end
	
	// add all events' function
	operation createEvents(sm : StateMachine) is do
		sm.events.each{event | 
			var function_name : String init str_util.replaceSpaceWithUnderscore(event.name)+"__Event"
			var op : JavaOperation init JavaOperation.new.initialize("public","void",function_name)
			
			// add method exception
			op.exceptions.add("Statechart_exception")
			
			op.body.add(str_util.addUnderscore(str_util.replaceSpaceWithUnderscore(sm.name))+".run_to_completion(\""+event.name+"__Event\")")
			java_class.operations.add(op)
		}
	end
	
	// Create all activities' functions with the operations done inside.
	operation createActivities(sm : StateMachine) is do
		
	end
	
	// Create all guards' functions (boolean) 
	operation createGuards(sm : StateMachine) is do
	
	end

}