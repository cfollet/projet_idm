/* $Id:$ 
 * Creation : October 18, 2015
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 * Namming convention : 
 * 		attribute : lowercase and underscore separated
 *		method name : undersocre separated 
 *			guard  : {from}__{to}__Guard
 *			activity : {State_Name}__Activity
 */
@mainClass "Transformation::Transformation"


package Transformation;


require kermeta
require "platform:/resource/StateMachine/transfos/java/JavaClass.kmt"
require "platform:/resource/StateMachine/transfos/java/JavaAttribute.kmt"
require "platform:/resource/StateMachine/transfos/java/JavaOperation.kmt"
require "platform:/resource/StateMachine/transfos/utils/StringUtil.kmt"
require "platform:/resource/StateMachine/metaModels/StateMachine.ecore"

using kermeta::standard
using JavaClass
using SimplStateMachine
using StringUtil
using JavaAttribute
using JavaOperation

enumeration Operators { add; sub; mul; div; eq; neq; gt; gte; lt; lte; ~and; ~or; ~not; } 

class Transformation
{
	attribute java_class : JavaClass
	attribute str_util : StringUtil
	attribute sm : StateMachine

	operation initialize() : Transformation is do
		java_class := JavaClass.new.initialize("public","")
		str_util := StringUtil.new
		
		result := self
	end

	// ecore -> java pau ware
    operation transform(sm : StateMachine) is do
    	stdio.writeln("Processing transformation...")
    	// Set the StateMachine 
    	self.sm := sm
    	// Set class name
    	java_class.name := str_util.replaceSpaceWithUnderscore(self.sm.name)
    	
    	// add all imports 
    	java_class.imports.add("com.pauware.pauware_engine._Core.*")
    	java_class.imports.add("com.pauware.pauware_engine._Exception.*")
    	java_class.imports.add("com.pauware.pauware_engine._Java_EE.*")
    	
    	// add all attributes
    	addAttributes()
		stdio.writeln("\t - attributes created")
		
		// Add all methods
		addConstructor()
		stdio.writeln("\t - constructor created")
		addStart()
		stdio.writeln("\t - start method created")
		addStop()
		stdio.writeln("\t - stop method created")
		addEvents()
		stdio.writeln("\t - events methods created")
		addActivities()
		stdio.writeln("\t - activities methods created")
		addGuards()
		stdio.writeln("\t - guards methods created")
		
		stdio.writeln("Transformation complete!")
    end
    
    operation addAttributes() is do
		self.sm.states.each { s | addStateAttribute(s) }
		var attr : JavaAttribute init JavaAttribute.new.initialize("private","AbstractStatechart_monitor",str_util.addUnderscore(self.sm.name))
		java_class.attributes.add(attr)
		
		// Add all variables
		sm.variables.each{variable | 
			var variableAttr : JavaAttribute init JavaAttribute.new.initialize("private",getTypeToJava(variable), str_util.addUnderscore(variable.name))
			java_class.attributes.add(variableAttr)
		}
    end 
    
    // Get the name of the given state and prefix it by 
    // the name of his container if any
    operation getFullStateName(s : State) : String is do
    	var name : String init ""
    	if (StateMachine.isInstance(s)) then
    		result := ""
    	else
    		name := str_util.addUnderscore(str_util.replaceSpaceWithUnderscore(s.name))
    		if (s.container != void) then 
    			var compState : State
    			var compName : String
    			compState ?= s.container
    			compName := getFullStateName(compState)
    			if not(compName.equals("")) then name := compName + "_" + name end 
    		end
    		result := name
    	end
    end
    
    // add recursively a state and his child if any 
    // to the java class as an attribute
	operation addStateAttribute(state : State) is do
		var attr : JavaAttribute init JavaAttribute.new.initialize("private","AbstractStatechart",getFullStateName(state))
		java_class.attributes.add(attr)
		if (CompositeState.isInstance(state)) then
			var compState : CompositeState
			compState ?= state
			compState.states.each { s | addStateAttribute(s) }		
		end
	end
	
	// add the behavior of the current state (activity, inputState, ...)
	// the op parameter is for adding it inside a constructor for exemple
	operation addStateBehavior(state : State, op : JavaOperation) is do 
		if (not CompositeState.isInstance(state)) 
			then // Not a composite state, just print it
				op.body.add(getFullStateName(state) + " = new Statechart(\""+getFullStateName(state)+"\")")
				// Now, print his operation
				if(state.~operation != void)
					then op.body.add(getFullStateName(state)+".doActivity(this, \""+getFullStateName(state)+"__Activity\")")
				end
				op.body.add("") 
			else // A composite state, compute all child state recursively and add xor childs chain 
				var compState : CompositeState
				var line : String init ""
				compState ?= state
				
				// compute child recursively
				compState.states.each { s | addStateBehavior(s, op)}
				
				// add entry point of the composite state
				op.body.add(getFullStateName(compState.initialState.referencedState)+".inputState()")
				
				// add xor chain
				line := line + getFullStateName(compState) + " = "
				compState.states.each { s | line := line + "(" + getFullStateName(s) + ".xor" }
				line := line.substring(0,line.size-4)
				compState.states.each { s | line := line + ")"}
				//line := line.substring(0,line.size-1)
				line := line + ".name(\""+getFullStateName(compState)+"\")"
				op.body.add(line)
		end
	end
	
	// create the java class constructor and initialize the behavior
	operation addConstructor () is do
		var op : JavaOperation init JavaOperation.new.initialize("public","",str_util.replaceSpaceWithUnderscore(self.sm.name))
		var line : String init ""

		self.sm.states.each { s | addStateBehavior(s,op) }
		
		// add method exception
		op.exceptions.add("Statechart_exception")
				
		// Add StateMachine entry point
		op.body.add(getFullStateName(self.sm.initialState.referencedState)+".inputState()")
		
		// add the Monitor line with a chain of the child of StateMachine
		line := str_util.addUnderscore(self.sm.name)+" = new Statechart_monitor"
		self.sm.states.each { s | line := line + "(" + getFullStateName(s) + ".xor" }
		line := line.substring(0,line.size-4)
		self.sm.states.each { s | line := line + ")"}
		line := line.substring(0,line.size-1)
		line := line+ ","+ "\""+str_util.replaceSpaceWithUnderscore(self.sm.name)+"\",AbstractStatechart_monitor.Show_on_system_out, null)"
		op.body.add(line)
		
		// Initialze the variable
		sm.variables.each{variable | 
		if(variable.~value != void) then
			line := getVariable(variable)+" = "
			if(BooleanData.isInstance(variable.~value)) then
				var bool : BooleanData init BooleanData.new
				bool ?= variable.~value
				line := line + bool.~value.toString
			end
			if(IntegerData.isInstance(variable.~value)) then
				var int : IntegerData init IntegerData.new
				int ?= variable.~value
				line := line + int.~value.toString
			end
			op.body.add(line)
		end
		}
		
		java_class.operations.add(op)
	end

	// Create start method where we add the transitions [with event and guard]
	operation addStart() is do
		var op : JavaOperation init JavaOperation.new.initialize("public","void","start")
		var line : String init ""
		
		// add method exception
		op.exceptions.add("Statechart_exception")
		
		self.sm.transitions.each{transition | 
			// adding the event name 
			line := str_util.addUnderscore(str_util.replaceSpaceWithUnderscore(self.sm.name))+".fires(\""+str_util.replaceSpaceWithUnderscore(transition.event.name)+"__Event\", "
			
			// adding the source and the target
			line := line + getFullStateName(transition.source) + ", "
			line := line + getFullStateName(transition.target) + ", "
			
			// adding the guard if any
			if(transition.guard != void)
				then line := line + "this, \"" + getFullStateName(transition.source)+"_"+ getFullStateName(transition.target)+ "__Guard" + "\""
				else line := line + "true" // Optionnal in fires() parameters?
			end
			line := line + ")"
			op.body.add(line)
		}
		
		// Start the statemachine
		op.body.add(str_util.addUnderscore(str_util.replaceSpaceWithUnderscore(self.sm.name))+".start()")
		
		java_class.operations.add(op)
	end	
	
	// Stop method to stop the statemachine ^^
	operation addStop() is do
		var op : JavaOperation init JavaOperation.new.initialize("public","void","stop")
		op.body.add(str_util.addUnderscore(str_util.replaceSpaceWithUnderscore(self.sm.name))+".stop()")
		
		// add method exception
		op.exceptions.add("Statechart_exception")
		
		java_class.operations.add(op)
	end
	
	// add all events' function
	operation addEvents() is do
		self.sm.events.each{event | 
			var function_name : String init str_util.replaceSpaceWithUnderscore(event.name)+"__Event"
			var op : JavaOperation init JavaOperation.new.initialize("public","void",function_name)
			
			// add method exception
			op.exceptions.add("Statechart_exception")
			
			op.body.add(str_util.addUnderscore(str_util.replaceSpaceWithUnderscore(self.sm.name))+".run_to_completion(\""+event.name+"__Event\")")
			java_class.operations.add(op)
		}
	end
	
	// Create all activities' functions with the operations done inside.
	operation addActivities() is do
		self.sm.states.each{s | addActivity(s)}
	end
	
	operation addActivity(state : State) is do
		if (not CompositeState.isInstance(state)) 
			then // Not a composite state, just print activity if exist
				if(state.~operation != void) then 
					var op : JavaOperation init JavaOperation.new.initialize("public", "void",getFullStateName(state)+"__Activity")
					state.~operation.contents.each{ assignment |
						var line : String init ""
						op.body.add(getVariable(assignment.variable)+" = "+ getExpression(assignment.expression))
					}
					op.body.add("")
					java_class.operations.add(op)
				end
			else // A composite state, compute all child state recursively to find all activities
				var compState : CompositeState
				var line : String init ""
				compState ?= state
				
				// compute child recursively
				compState.states.each { s | addActivity(s)}
		end
	end
	
	// Create all guards' functions (boolean) 
	operation addGuards() is do
		self.sm.transitions.each{ transition |
		if(transition.guard != void) then
			var op : JavaOperation init JavaOperation.new.initialize("public", "boolean",getFullStateName(transition.source)+"_"+ getFullStateName(transition.target)+ "__Guard")
			op.body.add("return " + getExpression(transition.guard))
			java_class.operations.add(op)
		end
		}
	end
	
	// Get the variable string 
	// If the variable is in the Statemachine, just reference it : this.{var_name}
	// else create a local one {var_type} {var_name}
	operation getVariable(variable : Variable) : String is do
		var isInStateMachine : Boolean init false
		isInStateMachine := self.sm.variables.contains(variable)
		
		if(isInStateMachine)
			then result := "this."+ str_util.addUnderscore(variable.name)
			else result := getTypeToJava(variable)+" "+variable.name
		end
	end
	
	operation getTypeToJava(variable : Variable) : String is do 
		if(BooleanVariable.isInstance(variable)) then result:="boolean" end
		if(IntegerVariable.isInstance(variable)) then result:="int" end
	end
	
	operation getExpression(expr : ExpressionElement) : String is do
	
		// If the expression element is an expression, we call getExpression again with left and right
		if(Expression.isInstance(expr)) then 
			var expression : Expression
			expression ?= expr
			result := "("+getExpression(expression.left) + getOperatorForJava(expression.operator.name) + getExpression(expression.right) + ")"
		end
		// If the expression is a data, we print the value
		if(Data.isInstance(expr)) then
			if(BooleanData.isInstance(expr)) then
				var bool : BooleanData init BooleanData.new
				bool ?= expr
				result := bool.~value.toString
			end
			if(IntegerData.isInstance(expr)) then
				var int : IntegerData init IntegerData.new
				int ?= expr
				result := int.~value.toString
			end
		end
		
		// if the expression is a variable reference, we print the variable
		if(VariableReference.isInstance(expr)) then
			var variableReference : VariableReference
			variableReference ?=expr
			result := getVariable(variableReference.variable)
		end
	end
	
	// add; sub; mul; div; eq; neq; gt; gte; lt; lte; and; or; not;
	operation getOperatorForJava(operator : String) : String is do
		if(operator == "add") then result := "+" end
		if(operator == "sub") then result := "-" end
		if(operator == "mul") then result := "*" end
		if(operator == "div") then result := "/" end
		if(operator == "eq") then result := "==" end
		if(operator == "neq") then result := "!=" end
		if(operator == "gt") then result := ">" end
		if(operator == "gte") then result := ">=" end
		if(operator == "lt") then result := "<" end
		if(operator == "lte") then result := "<=" end
		if(operator == "and") then result := "&&" end
		if(operator == "or") then result := "||" end
		if(operator == "not") then result := "!" end
	end

}