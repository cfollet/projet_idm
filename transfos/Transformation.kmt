/* $Id:$ 
 * Creation : October 18, 2015
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            root
 */
@mainClass "Transformation::Transformation"


package Transformation;


require kermeta
require "platform:/resource/StateMachine/transfos/java/JavaClass.kmt"
require "platform:/resource/StateMachine/transfos/java/JavaAttribute.kmt"
require "platform:/resource/StateMachine/transfos/utils/StringUtil.kmt"
require "platform:/resource/StateMachine/metaModels/StateMachine.ecore"

using kermeta::standard
using JavaClass
using SimplStateMachine
using StringUtil
using JavaAttribute

class Transformation
{
	attribute java_class : JavaClass
	attribute str_util : StringUtil
	
	operation initialize() : Transformation is do
		java_class := JavaClass.new.initialize("public","")
		str_util := StringUtil.new
		
		result := self
	end

	// ecore -> java pau ware
    operation transform(sm : StateMachine) is do
    	// Set class name
    	java_class.name := str_util.replaceSpaceWithUnderscore(sm.name)
    	
    	// Add all attributes
		sm.states.each { s | printState(s) }
		var attr : JavaAttribute init JavaAttribute.new.initialize("private","AbstractStatechart_monitor",str_util.underscoreAndLower(sm.name))
		java_class.attributes.add(attr)
		
		// Add all methods
    end
    
	operation printState(state : State) is do
		var attr : JavaAttribute init JavaAttribute.new.initialize("private","AbstractStatechart",str_util.underscoreAndLower(state.name))
		java_class.attributes.add(attr)
		if (CompositeState.isInstance(state)) then
			var compState : CompositeState
			compState ?= state
			compState.states.each { s | printState(s) }		
		end
	end
}